#!/bin/sh

CURRENT_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
REMOTE=$(git config --get "branch.$CURRENT_GIT_BRANCH.remote")
if [ "$REMOTE" != "" ]; then
	MERGE=$(git config --get "branch.$CURRENT_GIT_BRANCH.merge" | sed -e 's/.*\///g')
	if [ "$REMOTE" != "origin" ]; then
		echo "WARNING: this branch was pointing to the $REMOTE repo"
		echo "         RECONFIGURING upstream repo to be on 'origin'"
		echo "         using $CURRENT_GIT_BRANCH as remote branch name"
		echo ""
	fi

	if [ "$MERGE" != "" ]; then
		if [ $# -gt 0 ]; then
			echo "running: git push $@ origin $MERGE"
			git push -u $@ origin $MERGE
		else
			echo "running: git push origin $MERGE"
			git push origin $MERGE
		fi
	else
		echo "Umm... you've got a remote configured but not a merge. quitting"
	fi

	if [ "$REMOTE" != "origin" ]; then
		# reset the remote to what it was
		git branch $CURRENT_GIT_BRANCH -u $REMOTE/$MERGE
	fi

else
	echo "No branch specific upstream. "
	echo "Want me to set the upstream tracking to origin/$CURRENT_GIT_BRANCH ? [enter for yes|n]"
	read SET_UPSTREAM
	if [ "$SET_UPSTREAM" != "n" ]; then
		git push --set-upstream origin $CURRENT_GIT_BRANCH
	else
		echo "Ok, you'll probably want to run something like this soon:"
		echo "    git push --set-upstream origin $CURRENT_GIT_BRANCH"
	fi
	RESPONSE='q'
	if [ "$SET_UPSTREAM" = "" ]; then
		RESPONSE=''
	else
		echo "Continue with default? [enter for yes|q for quit]"
		# technically it's enter or anything else to quit
		# but we'll say 'q' ;) 
		read RESPONSE
	fi
	if [ "$RESPONSE" = "" ]; then
		if [ $# -gt 0 ]; then
			echo "running: git push $@ origin $CURRENT_GIT_BRANCH"
			git push $@ $REMOTE $MERGE
		else
			echo "running: git push origin $CURRENT_GIT_BRANCH"
			git push origin $CURRENT_GIT_BRANCH
		fi
	else
		echo "quitting"
	fi
fi

